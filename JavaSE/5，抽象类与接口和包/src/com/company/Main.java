package com.company;
/*
@只有看到了具体的动物，你才知道，这是什么动物。所以说， 动物本身并不是一个具体的事物，
而是一个抽象的事物。只有真正的猫，狗才是具体的动物。
同理，我们也可以推想，不同的动物吃的东西应该是不一样的，所以，我们不应该在动物类中给出
具体体现，而是应该给出一个声明即可。在Java中一个没有方法体的方法应该定义为抽象方法，而类中
如果有抽象方法，该类必须定义为抽象类。
@抽象类的概述:
动物不应该定义为具体的东西而且动物中的吃睡等也不应该是具体的,
我们把一个不是具体的功能称为抽象的功能，而一个类中如果有抽象的功能，该类必须是抽象类，
@抽象类的特点：
    A:抽象类和抽象方法必须用abstract关键字修饰
    B:抽象类中不一定有抽象方法,但是有抽象方法的类必须定义为抽象类
    C:抽象类不能实例化
       因为它不是具体的。
       抽象类有构造方法但是不能实例化?构造方法的作用是什么呢?
       用千子类访问父类数据的初始化
       ？（可通过具体的子类进行实例化）多态主要用于抽象类
          //Animal是抽象的;无法实例化//Animal a = new Animal () ;
          //通过多态的方式Animal a=new Cat() ;a.eat() ;
       抽象类的实例化其实是靠具体的子类实现的，是多态的方式。
     D:抽象的子类
         a:如果不想重写抽象方法，该子类是个抽象类。
         b:重写所有的抽象方法，这个时候子类是一个具体的类
@抽象类的成员特点：
         成员变量：既可以是变量也可以是常量
         构造方法:有，用于子类访问父类 数据的初始化
         成员方法：既可以是抽象的也可以是非抽象的。
      抽象类的成员方法特性：
          A:抽象方法强制要求子类做的事情
          B:非抽象方法子类继承的事情提高代码复用性
@分析；从具体到抽象
 实现：从抽象到具体
@一一个类如果没有抽象方法。可不可以定义为抽象类?如果可以，有什么意义
          A:可以
          B:不让创建对象
  abstract不能和哪些关键字共在
          private冲突（私有不能被继承，抽象要求被重写）
          final冲突
          static无意义
 */

public class Main {

    public static void main(String[] args) {
	// write your code here
    }
}
