package com.company;
/*
要拿一个文件夹中所有的。jpg文件--》
判断是否是文件，是文件判断是否以jpg结尾
判断是文件夹，继续进来，拿所有的文件和文件夹
--》判断是否是文件，是文件判断是否以jpg结尾
    判断是文件夹，继续进来，拿所有的文件和文件夹
--》无非是循环循环，再循环，拿每一个再来一次，--》关键是循环多少次不知道
--》针对这种情况，java提供啦 -》递归
递归：（可解决一些循环的问题，也相当于一种循环，但是能用循环的，尽量不要用递归）方法的定义中调用方法本身的现象
递归:方法定义中调用方法本身的现象
      方法的嵌套调用,这不是递归。  Math.max(Math.max(a,b),C) ;
public void show(int, n) {
         if(n <= 0) {
         System.exit (0) ;
          }
         System.out.println(n) ;
         show(--n) ;
}（递归）
注意事项:
A:递归-定要有出口，否则就是死递归
B :递归的次数不能太多,否则就内存溢出
C :构造方法不能递归使用
举例（递归）:
A:从前有座山,山里有座庙,庙里有个老和尚和小和尚,老和尚在给小和尚讲故事,故事是:
     从前有座山，山里有座庙,庙里有个老和尚和小和尚,老和尚在给小和尚讲故事,故事是:
        从前有座山,山里有座庙,庙里有个老和尚和小和尚,老和尚在给小和尚讲故事,故事是:
           从前有座山,山里有座庙,庙里有个老和尚和小和尚,老和尚在给小和尚讲故事,故事是:

       。。。。。。
           庙挂了;或者山崩了



 */

public class 递归 {
    public static void main(String[] args) {
        System.out.println(jieCheng(5));
    }
    /*
    用递归求5的阶乘：
    做递归要写一个方法：
                   返回值类型：int
                   参数列表：int n
    出口条件：if（n==1）{return 1；}
    规律：if（n！=1）{return n*方法名（n-1）;}
     */
    public static int jieCheng(int n){
        if(n==1){
            return 1;
        }else{
            return n*jieCheng(n-1);
        }
    }

}
