package com.company;
/*
●多态概述
       某一个事物，在不同时刻表现出来的不同状态。
  举例:
       猫可以是猫的类型。猫m= new猫();
       同时猫也是动物的一-种，也可以把猫称为动物。
       动物d= new猫（）;
       在举一个例子:水（液态，气态，固态）在不同时刻的状态
 多态的前提:
        A:要有继承关系
        B:要有方法重写
        C:要有父类引用指向子类对象。
          父 f=new 子();
 多态中的成员访问特点:
        A:成员变量：编译看左边运行看左边
        B:构造方法：创建子类对象的时候访问父类的构造方法。对父类的数据进行初始化a
        C:成员方法：编译看左边运行看右边
        D:静态方法：编译看左边运行看左边
          (静态和类相关，算不上重写所以，访问还是左边的)
        由干成员方法存在方法重写所以它运行看右边
 多态的好处：A:提高了代码的维护性（继承保证）
          B:提高了代码的扩展性（有多态保证）
 多态的鱉端:
         不能使用子类的特有功能
         我就想使用子类的特有功能?行不行?
         行，怎么用呢?
         A:创建子类对象调用方法即可(可以但是很多时候不合理。而且太占内存了)
         B:把父类的引用，强制转换为子类的引用(向下转型)
         对象间的转型问题:
               向上转型:  Fu f= new Zi();
               向下转型:Zi z=(Zi)f;//要求该f必须是能够转换为Zi的。
ClassCastException类型转换异常：一般在多态的向下转型中容易出现


 */

public class 多态 {
}
